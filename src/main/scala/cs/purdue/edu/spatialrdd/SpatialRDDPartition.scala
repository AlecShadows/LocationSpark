/**
 * Created by merlin on 8/4/15.
 */

/**
 * this class is learned from the
 * https://github.com/merlintang/spark-indexedrdd/blob/master/src/main/scala/edu/berkeley/cs/amplab/spark/indexedrdd/IndexedRDDPartition.scala
 */

/**
 * this interface for spatial operation among spark rdd's partition
 */
package cs.purdue.edu.spatialrdd

import scala.reflect.ClassTag
import cs.purdue.edu.spatialindex.rtree.Entry

abstract class SpatialRDDPartition [K, V] extends Serializable {

  protected implicit def kTag: ClassTag[K]
  protected implicit def vTag: ClassTag[V]

  def size: Long

  /** Return the value for the given key. */
  def apply(k: K): Option[V]

  def isDefined(k: K): Boolean

  def iterator: Iterator[(K, V)]

  /**
   * Gets the values corresponding to the specified keys, if any. those keys can be the two dimensional object
   */
  def multiget(ks: Iterator[K]): Iterator[(K, V)]

  /**
   * Updates the keys in `kvs` to their corresponding values generated by running `f` on old and new
   * values, if an old value exists, or `z` otherwise. Returns a new IndexedRDDPartition that
   * reflects the modification.
   */
  def multiput[U](kvs: Iterator[(K, U)], z: (K, U) => V, f: (K, V, U) => V): SpatialRDDPartition[K, V]


  /** Deletes the specified spatial entry elements. Returns a new IndexedRDDPartition that reflects the deletions. */
  def delete(ks: Iterator[Entry[V]]): SpatialRDDPartition[K, V]


  /**
   *range search and find points inside the box, and each element meet the condition, and return a iterator,
   * and this iterator can be used for other RDD
   */
  def filter[U](box:U, z:Entry[V]=>Boolean):Iterator[(K,V)]

  /**
   * K-NN search for certain point, and return entries meet the condition
   */

  def knnfilter[U](entry:U, k:Int, z:Entry[V]=>Boolean):Iterator[(K,V, Double)]

  /**
   * Creates a new partition with values from `elems` that may share an index with `this`,
   * merging duplicate keys in `elems` arbitrarily.
   */
  //def createUsingIndex[V2: ClassTag](elems: Iterator[(K, V2)]): SpatialRDDPartition[K, V2]

  /**
   * Restricts the entries to those satisfying the given predicate.
   */
  //def filter(pred: (K, V) => Boolean): SpatialRDDPartition[K, V]



}
